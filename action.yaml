---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

name: "️Gerrit change request information"
description: "Gerrit change request information"

inputs:
  gerrit_change_url:
    description: "Gerrit Change URL"
    required: true
  gerrit_patchset_number:
    description: "Patchset Number (optional)"
    required: false
  ssh_user_name:
    description: "SSH Username"
    required: true
    # type: string
    default: ""
  gerrit_known_hosts:
    description: 'Known hosts entry for Gerrit'
    required: true
    default: ""
  gerrit_server_port:
    description: 'Gerrit server port'
    required: false
    default: "29418"
  ssh_private_key:
    description: 'SSH Private Key'
    required: true
    # type: string
    default: ""

outputs:
  gerrit_branch:
    description: "Gerrit branch name"
    value: ${{ steps.gerrit.outputs.GERRIT_BRANCH }}
  gerrit_change_id:
    description: "Gerrit change ID"
    value: ${{ steps.gerrit.outputs.GERRIT_CHANGE_ID }}
  gerrit_change_url:
    description: "Gerrit change URL"
    value: ${{ steps.gerrit.outputs.GERRIT_CHANGE_URL }}
  gerrit_change_number:
    description: "Gerrit change number"
    value: ${{ steps.gerrit.outputs.GERRIT_CHANGE_NUMBER }}
  gerrit_event_type:
    description: "Event type (hardcoded as comment_added)"
    value: ${{ steps.gerrit.outputs.GERRIT_EVENT_TYPE }}
  gerrit_patchset_number:
    description: "Patchset number"
    value: ${{ steps.gerrit.outputs.GERRIT_PATCHSET_NUMBER }}
  gerrit_patchset_revision:
    description: "Patchset revision SHA"
    value: ${{ steps.gerrit.outputs.GERRIT_PATCHSET_REVISION }}
  gerrit_project:
    description: "Gerrit project name"
    value: ${{ steps.gerrit.outputs.GERRIT_PROJECT }}
  gerrit_refspec:
    description: "Refspec for the patchset"
    value: ${{ steps.gerrit.outputs.GERRIT_REFSPEC }}
  gerrit_hostname:
    description: "Gerrit server hostname"
    value: ${{ steps.gerrit.outputs.GERRIT_HOSTNAME }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Install jq
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Validate inputs
      shell: bash
      run: |
        # Validate required inputs
        if [[ -z "${{ inputs.gerrit_change_url }}" ]]; then
          echo "Error: gerrit_change_url is required" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.ssh_user_name }}" ]]; then
          echo "Error: ssh_user_name is required" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.ssh_private_key }}" ]]; then
          echo "Error: ssh_private_key is required" >&2
          exit 1
        fi

        if [[ -z "${{ inputs.gerrit_known_hosts }}" ]]; then
          echo "Error: gerrit_known_hosts is required" >&2
          exit 1
        fi

        echo "Input validation passed" >&2

    - name: Validate SSH key format
      shell: bash
      run: |
        # Create temporary file for secure SSH key validation
        temp_key_file=$(mktemp)
        trap 'rm -f "$temp_key_file"' EXIT

        # Write key to temporary file for validation
        echo "${{ inputs.ssh_private_key }}" > "$temp_key_file"

        # Basic SSH private key validation using file operations
        if ! head -n 1 "$temp_key_file" | grep -q "BEGIN.*PRIVATE KEY"; then
          echo "Error: SSH private key appears to be in invalid format" >&2
          exit 1
        fi

        # Check for encryption without exposing key content
        if grep -q "ENCRYPTED" "$temp_key_file"; then
          echo "Warning: SSH private key appears to be encrypted. " \
            "Ensure it's in unencrypted format for GitHub Actions." >&2
        fi

        echo "SSH key format validation passed" >&2

    - name: Extract SSH inputs
      id: ssh
      shell: bash
      run: |
        chmod +x .github/scripts/extract_ssh_inputs.sh
        .github/scripts/extract_ssh_inputs.sh "${{ inputs.gerrit_change_url }}"
        source gerrit_ssh_info.env
        echo "GERRIT_HOSTNAME=$GERRIT_HOSTNAME" >> $GITHUB_ENV
        echo "GERRIT_PROJECT=$GERRIT_PROJECT" >> $GITHUB_ENV
        echo "GERRIT_CHANGE_NUMBER=$GERRIT_CHANGE_NUMBER" >> $GITHUB_ENV

    - name: Setup SSH for Gerrit
      # yamllint disable-line rule:line-length
      uses: shimataro/ssh-key-action@d4fffb50872869abe2d9a9098a6d9c5aa7d16be4 # v2.7.0
      with:
        key: ${{ inputs.ssh_private_key }}
        name: id_rsa
        known_hosts: ${{ inputs.gerrit_known_hosts }}
        config: |
          Host ${{ env.GERRIT_HOSTNAME }}
            User ${{ inputs.ssh_user_name }}
            Port ${{ inputs.gerrit_server_port }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking yes
            UserKnownHostsFile ~/.ssh/known_hosts
            ConnectTimeout 10
            ServerAliveInterval 5
            ServerAliveCountMax 3

    - name: Run Gerrit Query
      id: gerrit
      shell: bash
      run: |
        chmod +x .github/scripts/gerrit_query.sh
        .github/scripts/gerrit_query.sh \
          "${{ inputs.gerrit_change_url }}" \
            "${{ inputs.gerrit_patchset_number }}" "${{ inputs.ssh_user_name }}"

        if [ -s "${GERRIT_CHANGE_NUMBER}.file" ]; then
          while IFS= read -r envvar; do
            echo "$envvar" >> $GITHUB_ENV
            echo "$envvar" >> $GITHUB_OUTPUT
          done < "${GERRIT_CHANGE_NUMBER}.file"
        else
          echo "Error: Gerrit query output file not found or empty."
          exit 1
        fi

    - name: Validate file output
      shell: bash
      run: |
        change_number="${{ steps.gerrit.outputs.GERRIT_CHANGE_NUMBER }}"
        if [ ! -f "$change_number".file ]; then
          echo "Missing file output"
          exit 1
        fi

    - name: Verify change-id
      shell: bash
      run: |
        if [[ -z "${{ steps.gerrit.outputs.GERRIT_CHANGE_ID }}" ]]; then
          echo "Error: Gerrit query failed or change not found."
          exit 1
        fi

    - name: Export Gerrit outputs
      shell: bash
      run: |
        echo "GERRIT_BRANCH=${{ steps.gerrit.outputs.GERRIT_BRANCH }}" \
          >> "$GITHUB_ENV"
        echo "GERRIT_CHANGE_ID=${{ steps.gerrit.outputs.GERRIT_CHANGE_ID }}" \
          >> "$GITHUB_ENV"
        echo "GERRIT_CHANGE_URL=${{ steps.gerrit.outputs.GERRIT_CHANGE_URL }}" \
          >> "$GITHUB_ENV"
        echo "GERRIT_CHANGE_NUMBER=" \
          "${{ steps.gerrit.outputs.GERRIT_CHANGE_NUMBER }}" >> "$GITHUB_ENV"
        echo "GERRIT_EVENT_TYPE=${{ steps.gerrit.outputs.GERRIT_EVENT_TYPE }}" \
          >> "$GITHUB_ENV"
        echo "GERRIT_PATCHSET_NUMBER=" \
          "${{ steps.gerrit.outputs.GERRIT_PATCHSET_NUMBER }}" >> "$GITHUB_ENV"
        echo "GERRIT_PATCHSET_REVISION=" \
          "${{ steps.gerrit.outputs.GERRIT_PATCHSET_REVISION }}" \
          >> "$GITHUB_ENV"
        echo "GERRIT_PROJECT=${{ steps.gerrit.outputs.GERRIT_PROJECT }}" \
          >> "$GITHUB_ENV"
        echo "GERRIT_REFSPEC=${{ steps.gerrit.outputs.GERRIT_REFSPEC }}" \
          >> "$GITHUB_ENV"
        echo "GERRIT_HOSTNAME=${{ steps.gerrit.outputs.GERRIT_HOSTNAME }}" \
          >> "$GITHUB_ENV"
